package olcp.handler;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.FastDateFormat;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import olcp.common.HttpClientUtils;
import olcp.constant.SysConstant;
/**
 * 爬虫调度处理器
 */
@Component
public class SpiderHandler {
//    @Autowired
//    private SpiderService spiderService;

    private static final Logger logger = LoggerFactory.getLogger(SpiderHandler.class);
    private static String HTTPS_PROTOCOL = "https:";
    public void spiderData() {
        logger.info("爬虫开始....");
        Date startDate = new Date();
        // 使用现线程池提交任务
        ExecutorService executorService = Executors.newFixedThreadPool(4);
        //引入countDownLatch进行线程同步，使主线程等待线程池的所有任务结束，便于计时
        CountDownLatch countDownLatch = new CountDownLatch(100);
        for(int i=1;i<=30;i++) {
            String url = "https://www.imooc.com/course/list?page="+i;
            String html = HttpClientUtils.sendGet1(url, null);
            if (!StringUtils.isBlank(html)) {
                Document document = Jsoup.parse(html);
                Elements elements = document.select("div[class=clearfix]").select("div[class=course-card-container]");
                List<String> cid = new ArrayList<>();
                for (Element element : elements) {
                    String id = element.select("a").attr("href");
                    String temp[] = id.replaceAll("\\\\", "/").split("/");
                    cid.add(temp[temp.length - 1]);
                }
                for (int j = 0; j < cid.size(); j++) {
                    String hr = cid.get(j);
                    executorService.submit(() -> {
                        grib(hr);
                        countDownLatch.countDown();
                    });
                }
            }
        }
        try {
            countDownLatch.await();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        executorService.shutdown();
        Date endDate = new Date();
        FastDateFormat fdf = FastDateFormat.getInstance(SysConstant.DEFAULT_DATE_FORMAT);
        logger.info("爬虫结束....");
        logger.info("[开始时间:" + fdf.format(startDate) + ",结束时间:" + fdf.format(endDate) + ",耗时:"
                + (endDate.getTime() - startDate.getTime()) + "ms]");

    }

    //存取数据
    public static void store(String courseSummary,String coursetype , String courseTime,String courseDifficulty,String courseOverallRating,String courseStudyPeople,String courseName,String coursetailnum) {

        String driverClassName = "com.mysql.jdbc.Driver";
        String url = "jdbc:mysql://localhost:3306/online_learning_platform?useUnicode=true&characterEncoding=utf-8&useSSL=true&zeroDateTimeBehavior=convertToNull";
        String username = "root";
        String password = "19981028";
        Connection conn = null;
        // 加载驱动类
        try {
            Class.forName(driverClassName);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        try {
            conn = DriverManager.getConnection(url, username, password);
            // 创建sql语句模板
            String sql = "INSERT into coursenew(courseSummary, coursetype , courseTime,courseDifficulty,courseOverallRating,courseStudyPeople,courseName,coursetailnum) VALUES(?,?,?,?,?,?,?,?)";
            // 创建一个声明对象
            PreparedStatement pst = conn.prepareStatement(sql);
            // 用循环将数据添加到sql模板中
            pst.setString(1, courseSummary);
            pst.setString(2, coursetype);
            pst.setString(3, courseTime);
            pst.setString(4, courseDifficulty);
            pst.setString(5, courseOverallRating);
            pst.setString(6, courseStudyPeople);
            pst.setString(7, courseName);
            pst.setString(8, coursetailnum);
            pst.addBatch();
            // 将sql语句发送到mysql上
            int[] res = pst.executeBatch();
            System.out.println(res);
            pst.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void store1(String courseSummary,String coursetype , String courseTime,String courseDifficulty,String courseOverallRating,String courseStudyPeople,String courseName,String coursetailnum) {

        String driverClassName = "com.mysql.jdbc.Driver";
        String url = "jdbc:mysql://localhost:3306/online_learning_platform?useUnicode=true&characterEncoding=utf-8&useSSL=true&zeroDateTimeBehavior=convertToNull";
        String username = "root";
        String password = "19981028";
        Connection conn = null;
        // 加载驱动类
        try {
            Class.forName(driverClassName);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        try {
            conn = DriverManager.getConnection(url, username, password);
            // 创建sql语句模板
            String sql = "INSERT into coursehot(courseSummary, coursetype , courseTime,courseDifficulty,courseOverallRating,courseStudyPeople,courseName,coursetailnum) VALUES(?,?,?,?,?,?,?,?)";
            // 创建一个声明对象
            PreparedStatement pst = conn.prepareStatement(sql);
            // 用循环将数据添加到sql模板中
            pst.setString(1, courseSummary);
            pst.setString(2, coursetype);
            pst.setString(3, courseTime);
            pst.setString(4, courseDifficulty);
            pst.setString(5, courseOverallRating);
            pst.setString(6, courseStudyPeople);
            pst.setString(7, courseName);
            pst.setString(8, coursetailnum);
            pst.addBatch();
            // 将sql语句发送到mysql上
            int[] res = pst.executeBatch();
            System.out.println(res);
            pst.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void grib(String id)
    {
        String curl="https://www.imooc.com/learn/"+id;
        String burl="https://www.imooc.com/course/AjaxCourseMembers?ids="+id;
        String html = HttpClientUtils.sendGet1(curl,null);
        String html1 = HttpClientUtils.sendGet1(burl,null);
        System.out.println(html1);
        Document document = Jsoup.parse(html);
        String courseSummary=document.select("div[class=course-description course-wrap]").text();
        String coursetype=document.select("div[class=path]").select("a").text();
        String temp[]=document.select("div[class=static-item l]").select("span[class=meta-value]").text().split(" ");
        String courseTime=temp[1];
        String courseDifficulty=temp[0];
        String courseOverallRating=document.select("div[class=static-item l score-btn]").select("span[class=meta-value]").text().split(" ")[0];
        String courseStudyPeople=null;
        String courseName=document.select("div[class=hd clearfix]").select("h2[class=l]").text();
        String regexStr = "\"numbers\":\"([0-9]+)\"";
        //获取Pattern对象
        Pattern pattern = Pattern.compile(regexStr);
        // 定义一个matcher用来做匹配
        Matcher matcher = pattern.matcher(html1);
        if (matcher.find()) {
            courseStudyPeople=matcher.group();
        }
        store(courseSummary,coursetype , courseTime,courseDifficulty,courseOverallRating,courseStudyPeople.split(":")[1].replace("\"", ""),courseName,id);
//        store1(courseSummary,coursetype , courseTime,courseDifficulty,courseOverallRating,courseStudyPeople,courseName,id);
    }

    public void spiderData1() {
        logger.info("爬虫开始....");
        Date startDate = new Date();
        // 使用现线程池提交任务
        ExecutorService executorService = Executors.newFixedThreadPool(4);
        //引入countDownLatch进行线程同步，使主线程等待线程池的所有任务结束，便于计时
        CountDownLatch countDownLatch = new CountDownLatch(100);
        for(int i=1;i<=30;i++) {
            String url = "https://www.imooc.com/course/list?sort=pop&page="+i;
            String html = HttpClientUtils.sendGet1(url, null);
            if (!StringUtils.isBlank(html)) {
                Document document = Jsoup.parse(html);
                Elements elements = document.select("div[class=clearfix]").select("div[class=course-card-container]");
                List<String> cid = new ArrayList<>();
                for (Element element : elements) {
                    String id = element.select("a").attr("href");
                    String temp[] = id.replaceAll("\\\\", "/").split("/");
                    cid.add(temp[temp.length - 1]);
                }
                for (int j = 0; j < cid.size(); j++) {
                    String hr = cid.get(j);
                    executorService.submit(() -> {
                        grib(hr);
                        countDownLatch.countDown();
                    });
                }
            }
        }
        try {
            countDownLatch.await();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        executorService.shutdown();
        Date endDate = new Date();
        FastDateFormat fdf = FastDateFormat.getInstance(SysConstant.DEFAULT_DATE_FORMAT);
        logger.info("爬虫结束....");
        logger.info("[开始时间:" + fdf.format(startDate) + ",结束时间:" + fdf.format(endDate) + ",耗时:"
                + (endDate.getTime() - startDate.getTime()) + "ms]");

    }

}












package priv.jesse.mall.handler;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.FastDateFormat;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import priv.jesse.mall.common.HttpClientUtils;
import priv.jesse.mall.constant.SysConstant;
/**
 * 爬虫调度处理器
 */
@Component
public class SpiderHandler {
//    @Autowired
//    private SpiderService spiderService;

    private static final Logger logger = LoggerFactory.getLogger(SpiderHandler.class);
    private static String HTTPS_PROTOCOL = "https:";
    public void spiderData() {
        logger.info("爬虫开始....");
        Date startDate = new Date();
        // 使用现线程池提交任务
        ExecutorService executorService = Executors.newFixedThreadPool(4);
        //引入countDownLatch进行线程同步，使主线程等待线程池的所有任务结束，便于计时
        CountDownLatch countDownLatch = new CountDownLatch(100);
        for(int i=1;i<=30;i++) {
            String url = "https://www.imooc.com/course/list?page="+i;
            String html = HttpClientUtils.sendGet1(url, null);
            if (!StringUtils.isBlank(html)) {
                Document document = Jsoup.parse(html);
                Elements elements = document.select("div[class=clearfix]").select("div[class=course-card-container]");
                List<String> cid = new ArrayList<>();
                for (Element element : elements) {
                    String id = element.select("a").attr("href");
                    String temp[] = id.replaceAll("\\\\", "/").split("/");
                    cid.add(temp[temp.length - 1]);
                }
                for (int j = 0; j < cid.size(); j++) {
                    String hr = cid.get(j);
                    executorService.submit(() -> {
                        grib(hr);
                        countDownLatch.countDown();
                    });
                }
            }
        }
        try {
            countDownLatch.await();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        executorService.shutdown();
        Date endDate = new Date();
        FastDateFormat fdf = FastDateFormat.getInstance(SysConstant.DEFAULT_DATE_FORMAT);
        logger.info("爬虫结束....");
        logger.info("[开始时间:" + fdf.format(startDate) + ",结束时间:" + fdf.format(endDate) + ",耗时:"
                + (endDate.getTime() - startDate.getTime()) + "ms]");

    }

    //存取数据
    public static void store(String courseSummary,String coursetype , String courseTime,String courseDifficulty,String courseOverallRating,String courseStudyPeople,String courseName,String coursetailnum) {

        String driverClassName = "com.mysql.jdbc.Driver";
        String url = "jdbc:mysql://localhost:3306/online_learning_platform?useUnicode=true&characterEncoding=utf-8&useSSL=true&zeroDateTimeBehavior=convertToNull";
        String username = "root";
        String password = "19981028";
        Connection conn = null;
        // 加载驱动类
        try {
            Class.forName(driverClassName);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        try {
            conn = DriverManager.getConnection(url, username, password);
            // 创建sql语句模板
            String sql = "INSERT into coursenew(courseSummary, coursetype , courseTime,courseDifficulty,courseOverallRating,courseStudyPeople,courseName,coursetailnum) VALUES(?,?,?,?,?,?,?,?)";
            // 创建一个声明对象
            PreparedStatement pst = conn.prepareStatement(sql);
            // 用循环将数据添加到sql模板中
            pst.setString(1, courseSummary);
            pst.setString(2, coursetype);
            pst.setString(3, courseTime);
            pst.setString(4, courseDifficulty);
            pst.setString(5, courseOverallRating);
            pst.setString(6, courseStudyPeople);
            pst.setString(7, courseName);
            pst.setString(8, coursetailnum);
            pst.addBatch();
            // 将sql语句发送到mysql上
            int[] res = pst.executeBatch();
            System.out.println(res);
            pst.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void store1(String courseSummary,String coursetype , String courseTime,String courseDifficulty,String courseOverallRating,String courseStudyPeople,String courseName,String coursetailnum) {

        String driverClassName = "com.mysql.jdbc.Driver";
        String url = "jdbc:mysql://localhost:3306/online_learning_platform?useUnicode=true&characterEncoding=utf-8&useSSL=true&zeroDateTimeBehavior=convertToNull";
        String username = "root";
        String password = "19981028";
        Connection conn = null;
        // 加载驱动类
        try {
            Class.forName(driverClassName);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        try {
            conn = DriverManager.getConnection(url, username, password);
            // 创建sql语句模板
            String sql = "INSERT into coursehot(courseSummary, coursetype , courseTime,courseDifficulty,courseOverallRating,courseStudyPeople,courseName,coursetailnum) VALUES(?,?,?,?,?,?,?,?)";
            // 创建一个声明对象
            PreparedStatement pst = conn.prepareStatement(sql);
            // 用循环将数据添加到sql模板中
            pst.setString(1, courseSummary);
            pst.setString(2, coursetype);
            pst.setString(3, courseTime);
            pst.setString(4, courseDifficulty);
            pst.setString(5, courseOverallRating);
            pst.setString(6, courseStudyPeople);
            pst.setString(7, courseName);
            pst.setString(8, coursetailnum);
            pst.addBatch();
            // 将sql语句发送到mysql上
            int[] res = pst.executeBatch();
            System.out.println(res);
            pst.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void grib(String id)
    {
        String curl="https://www.imooc.com/learn/"+id;
        String burl="https://www.imooc.com/course/AjaxCourseMembers?ids="+id;
        String html = HttpClientUtils.sendGet1(curl,null);
        String html1 = HttpClientUtils.sendGet1(burl,null);
        System.out.println(html1);
        Document document = Jsoup.parse(html);
        String courseSummary=document.select("div[class=course-description course-wrap]").text();
        String coursetype=document.select("div[class=path]").select("a").text();
        String temp[]=document.select("div[class=static-item l]").select("span[class=meta-value]").text().split(" ");
        String courseTime=temp[1];
        String courseDifficulty=temp[0];
        String courseOverallRating=document.select("div[class=static-item l score-btn]").select("span[class=meta-value]").text().split(" ")[0];
        String courseStudyPeople=null;
        String courseName=document.select("div[class=hd clearfix]").select("h2[class=l]").text();
        String regexStr = "\"numbers\":\"([0-9]+)\"";
        //获取Pattern对象
        Pattern pattern = Pattern.compile(regexStr);
        // 定义一个matcher用来做匹配
        Matcher matcher = pattern.matcher(html1);
        if (matcher.find()) {
            courseStudyPeople=matcher.group();
        }
        //store(courseSummary,coursetype , courseTime,courseDifficulty,courseOverallRating,courseStudyPeople.split(":")[1].replace("\"", ""),courseName,id);
      store1(courseSummary,coursetype , courseTime,courseDifficulty,courseOverallRating,courseStudyPeople.split(":")[1].replace("\"", ""),courseName,id);
    }

    public void spiderData1() {
        logger.info("爬虫开始....");
        Date startDate = new Date();
        // 使用现线程池提交任务
        ExecutorService executorService = Executors.newFixedThreadPool(4);
        //引入countDownLatch进行线程同步，使主线程等待线程池的所有任务结束，便于计时
        CountDownLatch countDownLatch = new CountDownLatch(100);
        for(int i=1;i<=30;i++) {
            String url = "https://www.imooc.com/course/list?sort=pop&page="+i;
            String html = HttpClientUtils.sendGet1(url, null);
            if (!StringUtils.isBlank(html)) {
                Document document = Jsoup.parse(html);
                Elements elements = document.select("div[class=clearfix]").select("div[class=course-card-container]");
                List<String> cid = new ArrayList<>();
                for (Element element : elements) {
                    String id = element.select("a").attr("href");
                    String temp[] = id.replaceAll("\\\\", "/").split("/");
                    cid.add(temp[temp.length - 1]);
                }
                for (int j = 0; j < cid.size(); j++) {
                    String hr = cid.get(j);
                    executorService.submit(() -> {
                        grib(hr);
                        countDownLatch.countDown();
                    });
                }
            }
        }
        try {
            countDownLatch.await();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        executorService.shutdown();
        Date endDate = new Date();
        FastDateFormat fdf = FastDateFormat.getInstance(SysConstant.DEFAULT_DATE_FORMAT);
        logger.info("爬虫结束....");
        logger.info("[开始时间:" + fdf.format(startDate) + ",结束时间:" + fdf.format(endDate) + ",耗时:"
                + (endDate.getTime() - startDate.getTime()) + "ms]");

    }

}

